<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>OTP Verified</title>
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        height: 100vh;
        width: auto;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        background: linear-gradient(135deg, #007dd0 0%, #e9f6ff 100%);
      }

      .card {
        background: #fff;
        border-radius: 20px;
        padding: 50px 40px;
        text-align: center;
        max-width: 500px;
        width: 100%;
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
      }

      h1 {
        color: #367c9a;
        font-size: 28px;
        margin: 20px 0 10px;
      }

      .db-message {
        margin: 15px 0;
        display: flex;
        opacity: 1;
        align-items: center;
        justify-content: center;
        gap: 5px;
        padding: 5px 5px;
      }
      .db-message .icon {
        color: #c83636 !important;
      }
      .db-message p {
        color: #c83636 !important;
      }
      .form-group {
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
        align-items: start;
        justify-content: center;
        position: relative;
      }

      label {
        display: block;
        margin-bottom: 8px;
        color: #333;
        font-weight: 600;
      }

      input {
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 10px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.3s;
      }

      input:focus {
        border-color: #367c9a;
      }
      .show-button {
        position: absolute;
        right: 7px;
        top: 37px;
        color: #888;
        transition: all;
        transition-duration: 0.5s;
      }
      .show-button:hover {
        color: #007dd0;
        cursor: pointer;
      }

      .req-card {
        position: absolute;
        top: 100%;
        left: 0;
        margin-top: 8px;
        background: #fff;
        border-radius: 10px;
        padding: 12px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        text-align: left;
        font-size: 14px;
        color: #444;
        display: none;
        pointer-events: none;
        transition: all 0.3s ease;
        z-index: 10;
      }
      #newPassword:focus ~ .req-card {
        display: block;
      }

      .req-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 6px 4px;
      }

      .req-item.invalid {
        color: #9b9b9b;
      }
      .req-item.invalid .icon {
        background: #fff7f7;
        color: #c83636;
        border: 1px solid rgba(200, 0, 0, 0.08);
      }
      .req-item.valid {
        color: #007dd0;
      }
      .req-item.valid .icon {
        background: #007dd0;
        color: #007dd0;
        border: 1px solid rgba(42, 138, 75, 0.12);
      }

      .icon {
        min-width: 22px;
        min-height: 22px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
        font-weight: 700;
        font-size: 14px;
      }

      .small-hint {
        font-size: 13px;
        color: #888;
        margin-top: 6px;
      }

      /* Match indicator */
      .match {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 8px;
        font-size: 14px;
      }  

    /**/
      .match.ok {
        color: #2a8a4b;
      }
      .match.bad {
        color: #c94b4b;
      }

      .match-bad-input {
        border: 1px solid red !important;
      }
      /* button */
      .btn {
        width: 100%;
        padding: 14px;
        background: #41839e;
        color: #fff;
        font-size: 16px;
        font-weight: 600;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .btn:disabled {
        background: #5ba4c4 !important;
        cursor: not-allowed;
      }

      .btn:hover {
        background: #409dc5;
        transform: translateY(-2px);
      }

      .note {
        font-size: 12px;
        color: #666;
        text-align: center;
        margin-top: 15px;
      }

      .circle {
        position: absolute;
        border-radius: 50%;
        background: rgba(105, 184, 236, 0.15);
        animation: float 6s ease-in-out infinite;
      }

      .circle.one {
        width: 100px;
        height: 100px;
        top: -30px;
        left: -30px;
      }
      .circle.two {
        width: 60px;
        height: 60px;
        bottom: -20px;
        right: -20px;
        animation-delay: 2s;
      }

      @keyframes float {
        0%,
        100% {
          transform: translateY(0) rotate(0deg);
        }
        50% {
          transform: translateY(-15px) rotate(45deg);
        }
      }

      /* Optional: responsive */
      @media (max-width: 500px) {
        .card {
          padding: 40px 20px;
        }
      }
    </style>
  </head>
  <body>
    <div class="card">
      <div class="wraper">
        <div class="circle one"></div>
        <div class="circle two"></div>
        <h1>Change Password!</h1>
        <div id="db-message" class="db-message"></div>
        <form onsubmit="handleSubmit(event)">
          <div class="form-group">
            <label for="newPassword">New Password</label>
            <input
              type="password"
              id="newPassword"
              name="newPassword"
              required
            />
            <span
              class="show-button"
              onclick="togglePassword('newPassword', this)"
            >
              <i data-lucide="eye"></i>
            </span>
            <div id="reqCard" class="req-card">
              <div class="req-item" id="req-length">
                <span class="icon">✖</span>At least
                <strong>8 characters</strong>
              </div>
              <div class="req-item" id="req-uppercase">
                <span class="icon">✖</span>At least
                <strong>1 uppercase</strong> letter
              </div>
              <div class="req-item" id="req-number">
                <span class="icon">✖</span>At least <strong>1 number</strong>
              </div>
              <div class="req-item" id="req-special">
                <span class="icon">✖</span>At least
                <strong>1 special character</strong> (!@#$%^&*)
              </div>
              <div class="small-hint">
                Tip: Use a mix of letters, numbers and symbols for a stronger
                password.
              </div>
            </div>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm New Password</label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              required
            />
            <span
              class="show-button"
              onclick="togglePassword('confirmPassword', this)"
            >
              <i data-lucide="eye"></i>
            </span>

            <p id="passwordErrorC" style="color: red; font-size: 14px"></p>
            <p
              id="passwordErrorC"
              style="color: red; font-size: 13px; margin-top: 6px"
            ></p>
            <div id="matchIndicator" class="match"></div>
          </div>
          <button type="submit" disabled id="submitBtn" class="btn">
            Update Password
          </button>
          <p class="note">
            Make sure your new password is at least 8 characters long.
          </p>
        </form>
      </div>
    </div>

    <script>
      const params = new URLSearchParams(window.location.search);
      const token = params.get('token');
      const hasUpper = /[A-Z]/;
      const hasNumber = /\d/;
      const hasSpecial = /[!@#$%^&*]/;
      const minLen = v => v.length >= 8;

      const newPassword = document.getElementById('newPassword');
      const confirmPassword = document.getElementById('confirmPassword');
      const reqCard = document.getElementById('reqCard');
      const submitBtn = document.getElementById('submitBtn');
      const matchIndicator = document.getElementById('matchIndicator');

      const reqLength = document.getElementById('req-length');
      const reqUpper = document.getElementById('req-uppercase');
      const reqNumber = document.getElementById('req-number');
      const reqSpecial = document.getElementById('req-special');
      const div = document.getElementById('db-message');
      function setReqState(node, ok) {
        if (ok) {
          node.classList.add('valid');
          node.classList.remove('invalid');
          node.querySelector('.icon').textContent = '✓';
        } else {
          node.classList.add('invalid');
          node.classList.remove('valid');
          node.querySelector('.icon').textContent = '✖';
        }
      }
      function updateChecks() {
        const v = newPassword.value || '';
        const okLen = minLen(v);
        const okUpper = hasUpper.test(v);
        const okNum = hasNumber.test(v);
        const okSpecial = hasSpecial.test(v);

        setReqState(reqLength, okLen);
        setReqState(reqUpper, okUpper);
        setReqState(reqNumber, okNum);
        setReqState(reqSpecial, okSpecial);

        const allValid = okLen && okUpper && okNum && okSpecial;
        newPassword.style = allValid
          ? 'border-color: #367f55;'
          : 'border-color:#c83636;';
        const confirmVal = confirmPassword.value || '';
        const match = allValid && confirmVal && v === confirmVal;
        submitBtn.disabled = !match;

        updateMatchIndicator(v, confirmVal);
      }

      function updateMatchIndicator(pw, cpw) {
        console.log({ pw, cpw });
        if (!cpw) {
          matchIndicator.textContent = '';
          return;
        }
        if (pw === cpw) {
          confirmPassword.style = 'border-color: #367f55;';
          matchIndicator.className = 'match ok';
          matchIndicator.textContent = '✅ Passwords match';
        } else {
          confirmPassword.style = 'border-color:#c83636;';
          matchIndicator.className = 'match bad';
          matchIndicator.textContent = '❌ Passwords do not match';
          submitBtn.disabled = true;
        }
      }

      newPassword.addEventListener('input', updateChecks);
      confirmPassword.addEventListener('input', updateChecks);

      function togglePassword(id, el) {
        const input = document.getElementById(id);
        if (input.type === 'password') {
          input.type = 'text';
          el.innerHTML = `<i data-lucide="eye-off"></i>`;
        } else {
          input.type = 'password';
          el.innerHTML = `<i data-lucide="eye"></i>`;
        }
        lucide.createIcons();
      }
      // change password functionc
      function responseError(message) {
        div.innerHTML = ` <i data-lucide="triangle-alert" class="icon"></i>
                        <p id="dbErrorMessage">${message}</p>`;
        lucide.createIcons();
      }

      async function handleSubmit(e) {
        e.preventDefault();

        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword =
          document.getElementById('confirmPassword').value;

        if (newPassword !== confirmPassword) {
          alert('Passwords do not match!');
          return;
        }

        try {
          const res = await fetch('/api/v1/auth/reset-password', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              authorization: `Bearer ${token}`,
              token: token,
            },
            body: JSON.stringify({
              newPassword: newPassword,
              confirmPassword: confirmPassword,
            }),
          });

          const data = await res.json();
          if (data?.success) {
            window.location.href = '/api/v1/auth/password-reset-success';
          }
          return responseError(data?.message || 'server error');
        } catch (error) {
          console.error('---------->>', error);
          responseError(error?.message || 'Error updating password!');
        }
      }
    </script>

    <!-- <i data-lucide="eye-off"></i> -->
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
      lucide.createIcons();
    </script>
  </body>
</html>
